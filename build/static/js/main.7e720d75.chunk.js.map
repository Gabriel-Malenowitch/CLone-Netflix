{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","Main","useState","scrollX","setScrollX","id","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","n","set_n","then","aux","firstDate","Date","first_air_date","genres","i","push","name","console","log","overview","description","substring","error","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","join","black","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChoise","floor","random","chose","choseInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e720d75.chunk.js","sourcesContent":["const API_KEY = '0c5a4ac046c0020ef050cc3499705b20';\r\nconst API_BASE = 'https://api.themoviedb.org/3'\r\n\r\n/*\r\n-Originais da netflix\r\n-recomendados\r\n-em alta ( top rated)\r\n-ação\r\n-comédia\r\n-terror\r\n-romance\r\n-documentarios\r\n*/\r\n\r\nconst basicFetch = async (endpoint)=>{\r\n    const req = await fetch(`${API_BASE}${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\nexport default{\r\n    getHomeList: async ()=>{\r\n        return[\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'Trending',\r\n                title: 'Recomendados para você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'top rated',\r\n                title: 'Em alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentarios',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-br&api_key=${API_KEY}`)\r\n            },\r\n        ];\r\n    },\r\n    getMovieInfo: async (movieId, type)=>{\r\n        let info = {};\r\n\r\n        if (movieId){\r\n            switch(type){\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-br&api_key=${API_KEY}`);\r\n                    break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-br&api_key=${API_KEY}`)\r\n                    break;\r\n                default:\r\n                    info = null;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return info;\r\n\r\n    }\r\n}","import React, {useState} from \"react\";\r\nimport './MovieRow.css'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\n\r\n\r\n\r\nlet Main = ({title, items}) => {\r\n\r\n    const [scrollX, setScrollX] = useState(0);\r\n\r\n    const handleLeftArrow = ()=>{\r\n        let x = scrollX + Math.round(window.innerWidth / 2);\r\n        if(x > 0){\r\n            x = 0;\r\n        }\r\n        setScrollX(x)\r\n    }\r\n\r\n    const handleRightArrow = ()=>{\r\n        let x = scrollX - Math.round(window.innerWidth / 2);\r\n        let listW = items.results.length * 150;\r\n        if((window.innerWidth-listW) > x){\r\n            x = (window.innerWidth-listW)-60\r\n        }\r\n        setScrollX(x)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h2 id=\"title\">{title}</h2>\r\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n                <ArrowBackIosIcon style={{fontSize: 50}} />\r\n            </div>\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n                <ArrowForwardIosIcon style={{fontSize: 50}} />\r\n            </div>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length*150\r\n                }}>\r\n                    {items.results.length > 0 && items.results.map((item, key)=>{\r\n                        return(\r\n                            <div className=\"movieRow--item\">\r\n                                    <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title}/>\r\n                            </div> \r\n                        )})}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","import React, { useState } from 'react';\r\nimport './FeaturedMovie.css';\r\n\r\nfunction Main(item){\r\n    const [n, set_n] = useState('');\r\n    item.item.then(aux => set_n(aux));\r\n\r\n    let firstDate = new Date(n.first_air_date);\r\n    let genres = [];\r\n    for(let i in n.genres){\r\n        genres.push( n.genres[i].name);\r\n    }\r\n    console.log(n);\r\n    console.log(n.overview);\r\n    let description = n.overview;\r\n    console.log(description);\r\n    \r\n    description = n.overview;\r\n    // console.log(description)\r\n    try {\r\n        description = description.substring(0, 200)+'...'\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n    return(\r\n        <section className=\"featured\" style={{\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${n.backdrop_path})`\r\n\r\n        }}>\r\n            <div className=\"featured--vertical\">\r\n                <div className=\"featured--horizontal\">\r\n                    <div className=\"featured--name\">{n.original_name}</div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">{n.vote_average}</div>\r\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured--seasons\">\r\n                            {n.number_of_seasons} temporada{n.number_of_seasons !==1 ? 's': ''}\r\n                        </div>\r\n                        <div className=\"featured--description\">{description}</div>\r\n                        <div className=\"featured--buttons\">\r\n                            <a className=\"featured--watchbutton\" href={`/watch/${n.id}`}>Assistir</a>\r\n                            <a className=\"featured--watchbutton\" href={`/watch/add/${n.id}`}>+ Minha lista</a>\r\n                        </div>\r\n                        <div className=\"featured--genres\"><strong>Gêneros: </strong>{genres.join(', ')}</div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from \"react\";\r\nimport './Header.css';\r\n\r\nfunction Main({black}){\r\n    return (\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"logo\" />\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img id=\"header--profile\" src=\"https://avatars.githubusercontent.com/u/56513919?v=4\" alt=\"Usuario\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Main;","import Tmdb from './Tmdb';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie'\nimport Header from './components/Header'\n\nlet Main = ()=>{\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  \n  useEffect(()=>{\n    const loadAll = async ()=>{\n      // Pegando a lista por completa\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n      \n      let originals = list.filter(i=>i.slug === 'originals');\n      let randomChoise = Math.floor(Math.random() * (originals[0].items.results.length-1))\n      let chose =  originals[0].items.results[randomChoise];\n      let choseInfo = Tmdb.getMovieInfo(chose.id, 'tv');\n      setFeaturedData(choseInfo);\n    }\n\n    loadAll();\n  }, []);\n\n  useEffect(()=>{\n    const scrollListener = ()=>{\n      if(window.scrollY > 10){\n        setBlackHeader(true);\n      }else{\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n    return ()=>{\n      window.removeEventListener('scroll', scrollListener);\n    }\n  })\n\n  /*\n    Header\n    Destaque\n    Listas\n    Rodapé\n  */\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader}/>\n\n      {featuredData &&\n        <FeaturedMovie item={featuredData}/>\n      }\n\n      <section className=\"lists\">\n        {\n          movieList.map((item, key)=>{\n            return(\n              <MovieRow key={key}  title={item.title} items={item.items}/>\n            )\n          })\n        }\n      </section>\n\n      <footer>\n        <p>\n        Feito por <strong>Gabriel Botelho Malenowitch</strong>, com muito \n        <span role=\"img\" aria-label=\"coração\">💝</span>\n        </p>\n        <p>Direitos de Imagem para Netflix</p>\n        <p>Dados pegos do site Themoviedb.org</p>\n      </footer>\n    </div>\n  );\n}\n\n\nexport default Main;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}